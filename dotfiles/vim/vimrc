" PLAGINS
call plug#begin('~/.vim/plugged')
Plug 'embear/vim-localvimrc'
" Plug 'scrooloose/nerdtree', { 'on':  ['NERDTreeToggle', 'NERDTreeFind','NERDTreeTabsToggle']}
" Plug 'jistr/vim-nerdtree-tabs'
Plug 'scrooloose/nerdcommenter'
Plug 'vim-scripts/DoxygenToolkit.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'axelf4/vim-strip-trailing-whitespace'
Plug 'junegunn/fzf', { 'do': { -> fzf#install()  }  } "it fzf ripgrep
Plug 'junegunn/fzf.vim' " it bat (for highlighting)
Plug 'dyng/ctrlsf.vim'
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-fugitive'
Plug 'aacunningham/vim-fuzzy-stash'
Plug 'airblade/vim-gitgutter'
Plug 'cohama/agit.vim', { 'on': ['Agit', 'AgitFile'] }
Plug 'vim-scripts/c.vim', { 'for':  ['c', 'cpp'] }
Plug 'jpalardy/vim-slime', { 'for':  ['py'] }
Plug 'w0rp/ale' "it shellcheck
Plug 'ludovicchabant/vim-gutentags'
Plug 'majutsushi/tagbar', { 'on':  'TagbarToggle' } "it ctags
Plug 'liuchengxu/vista.vim'
" Plug 'xolox/vim-misc'
" Plug 'xolox/vim-easytags'
Plug 'rrethy/vim-illuminate', { 'for':  ['py', 'c', 'cpp', 'sh'] }
Plug 'christoomey/vim-tmux-navigator'
Plug 'francoiscabrol/ranger.vim' "it ranger
Plug 'tpope/vim-unimpaired'
Plug 'raimondi/yaifa'
Plug 'tpope/vim-eunuch'
" Plug 'terryma/vim-multiple-cursors'
Plug 'skywind3000/asyncrun.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'gcmt/taboo.vim'
Plug 'morhetz/gruvbox'
Plug 'mhartington/oceanic-next'
Plug 'bfrg/vim-cpp-modern'
Plug 'mtdl9/vim-log-highlighting'
Plug 'hjson/vim-hjson'
" Plug 'yggdroot/indentline', { 'for':  ['c', 'cpp'] }
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'instant-markdown/vim-instant-markdown', {'for': 'markdown', 'do': 'yarn install'} "sudo npm -g install instant-markdown-d yarn
Plug 'godlygeek/tabular'
Plug 'lyokha/vim-xkbswitch' " it libxkbfile-devel (https://github.com/grwlf/xkb-switch)
" Plug 'qpkorr/vim-bufkill'
if has('nvim')
" Plug 'rbgrouleff/bclose.vim'
else
endif
call plug#end()


" GENERAL

" --codestype--
set noexpandtab
set tabstop=4
set shiftwidth=4
set cinoptions=(shiftwidth,W4

autocmd BufNewFile,BufRead * setlocal formatoptions-=cro
set hlsearch
set gdefault
set incsearch
set ignorecase
set smartcase
" set clipboard=unnamedplus
set noswapfile
set nobackup
set splitright
set splitbelow
set mouse+=a
if &term =~ '^screen'
    set ttymouse=xterm2
endif
let g:mapleader=';'
set autoread


" CUSTOMIZATION
set number
syntax on
colorscheme gruvbox
set background=dark
set shortmess+=O
set noshowmode
set cursorline
" Colors
hi VertSplit ctermbg=none
set fillchars+=vert:│
hi SignColumn ctermbg=none
hi TabLineFill ctermfg=gray ctermbg=black
hi TabLineSel cterm=bold ctermfg=black ctermbg=blue
hi TabLine cterm=bold ctermfg=gray ctermbg=black
hi Search ctermfg=110 ctermbg=none cterm=bold
" hi Visual ctermfg=Black ctermbg=110 cterm=bold
" hi Visual cterm=bold
hi Visual cterm=none
let g:load_doxygen_syntax=1
au FileType gitcommit setlocal tw=90
au FileType markdown setlocal colorcolumn=120
au FileType c,cpp setlocal colorcolumn=90
au BufNewFile,BufRead Jenkinsfile* setf groovy
au BufNewFile,BufRead gitconfig setf gitconfig
au BufNewFile,BufRead *dotfiles/i3 setf i3config
au BufNewFile,BufRead *waybar/config setf jsonc
au BufNewFile,BufRead *_monitor_preset setf swayconfig
au BufNewFile,BufRead *.def set syntax=c


" PLUGINS SETTINGS

" localvimrc
let g:localvimrc_sandbox = 0
let g:localvimrc_ask = 0

" Coc
let g:coc_global_extensions = ['coc-json', 'coc-explorer', 'coc-calc', 'coc-clangd', 'coc-sh', 'coc-pyright']

" NERDTree
let NERDTreeMinimalUI=1
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let g:NERDTreeMapJumpNextSibling = '<Nop>'
let g:NERDTreeMapJumpPrevSibling = '<Nop>'
" let g:nerdtree_tabs_autofind = 1 " fugitive breaks

" NERDCommenter
let g:NERDSpaceDelims = 1
let g:NERDCommentEmptyLines = 1
let g:NERDCustomDelimiters = { 'c': {'left': '//', 'leftAlt': '/*', 'rightAlt': '*/' } }

" nerdtree-syntax-highlight
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1

" AutoPairs
let g:AutoPairsMultilineClose = 0
" let g:AutoPairsFlyMode = 0

" Airline
let g:airline_theme='zenburn'
let g:airline_powerline_fonts = 1
let g:airline#extensions#xkblayout#enabled = 0
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#tabline#show_tab_nr = 0
let g:airline#extensions#tabline#show_tab_type = 0
let g:airline#extensions#tabline#close_symbol = '×'
let g:airline#extensions#tabline#show_close_button = 0
let g:airline#extensions#tabline#tab_min_count = 2
let g:airline#extensions#tabline#show_tab_count = 0
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = ''
let g:airline#extensions#tabline#right_sep = ''
let g:airline#extensions#tabline#right_alt_sep = ''
" let g:airline#extensions#whitespace#enabled = 0

" EasyMotion
let g:EasyMotion_keys = 'asdghklqwertyuiopzxcvbnmfj'

" FZF
let g:fzf_layout = { 'down': '~50%' }
let $FZF_DEFAULT_COMMAND = 'rg --files'
let $FZF_DEFAULT_OPTS='--bind ctrl-y:preview-up,ctrl-e:preview-down,
\ctrl-b:preview-page-up,ctrl-f:preview-page-down,
\ctrl-u:preview-half-page-up,ctrl-d:preview-half-page-down'
let g:fzf_history_dir = '~/.local/share/fzf-history'
let g:fzf_buffers_jump = 1

let g:fzf_action = {
  \ 'return': 'GotoOrOpen tab',
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

"off search in filename in Rg
" command! -bang -nargs=* Rg
      " \ call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case ".shellescape(<q-args>),
      " \ 1, {'options': '--delimiter : --nth 4..'}, <bang>0)

" Ctrlsf
let g:ctrlsf_follow_symlinks = 0
let g:ctrlsf_position = 'bottom'
let g:ctrlsf_mapping = {
    \ "next": "<C-l>",
    \ "prev": "<C-h>",
    \ }

" Ale
let g:ale_enabled=0
let g:ale_sign_column_always = 1
let g:ale_sign_error = '•'
let g:ale_sign_warning = '•'
" let g:ale_linters = {'c': ['gcc'], 'cpp': ['g++']}
let g:ale_linters = {'c': ['clang'], 'cpp': ['clang']}
let g:ale_cpp_gcc_options="-Wall -Wextra -pedantic -std=c99"
let g:ale_c_parse_makefile = 1
hi ALEErrorSign ctermfg=160 ctermbg=NONE
hi ALEWarningSign ctermfg=178 ctermbg=NONE
hi ALEInfoSign ctermfg=075 ctermbg=NONE

" CVim
let g:C_Ctrl_j   = 'off'

" Slime
let g:slime_target = "tmux"
let g:slime_python_ipython = 1

" Gitgutter
set updatetime=100
hi GitGutterAdd ctermfg=106 guibg=NONE
hi GitGutterChange ctermfg=172 guibg=NONE
hi GitGutterDelete ctermfg=160 guibg=NONE
hi GitGutterChangeDelete ctermfg=172 guibg=NONE

" Tagbar
let g:tagbar_compact = 1
let g:tagbar_sort = 0

" Vista
let g:vista_default_executive = 'coc'
let g:vista_sidebar_width = 40
let g:vista#renderer#enable_icon = 0
let g:vista_cursor_delay = 0
let g:vista_blink = [1, 200]

" identline
let g:indentLine_char = '⎸'

" instant-markdown
let g:instant_markdown_autostart = 0
let g:instant_markdown_open_to_the_world = 1

" Ctags
" set tags=tags;.git/tags;

" Gutentags
let g:gutentags_ctags_exclude = [
            \ 'external', 'linux', 'toolchain', 'bootloader', 'prebuilt',
            \'compilation_branch__*' ]

" Doxygen
let g:DoxygenToolkit_briefTag_pre="@Synopsis  "
let g:DoxygenToolkit_paramTag_pre="@Param "
let g:DoxygenToolkit_returnTag="@Returns   "
let g:DoxygenToolkit_blockHeader="-------------------------------"
let g:DoxygenToolkit_blockFooter="---------------------------------"
let g:DoxygenToolkit_authorName="Dmitry Privalov"
let g:DoxygenToolkit_licenseTag='Copyright (C) 2023 ООО "Предприятие "Элтекс"'

" XKBSWITCH
let g:XkbSwitchEnabled = 1

if has('nvim')
    " nmap <BS> <C-h>
    autocmd bufnewfile,bufread * hi Normal guibg=NONE ctermbg=NONE
else
    set timeoutlen=1000 ttimeoutlen=0
    set wildmode=longest,list,full

    let &t_SI.="\e[5 q" "SI = режим вставки
    let &t_SR.="\e[3 q" "SR = режим замены
    let &t_EI.="\e[1 q" "EI = нормальный режим

    map <Esc>[Z <S-Tab>
endif


" BINDS
nnoremap <silent> <CR> :set hlsearch<CR>:let @/=expand('<cword>')<CR><CR>
map <silent> <2-LeftMouse> :set hlsearch<CR>:let @/=expand('<cword>')<CR>
map <silent> <3-LeftMouse> :let @/ = ""<CR>
imap <2-LeftMouse> <c-o>*
" imap <C-f> <plug>(fzf-complete-line)
vmap <Leader>sf <Plug>CtrlSFVwordExec
nmap <Leader>sf <Plug>CtrlSFCCwordPath
" nnoremap * *``
imap jj <Esc>
imap оо <Esc>
" map <silent> <C-n> :NERDTreeTabsToggle<CR>
" vmap <silent> <C-n> <esc>:NERDTreeTabsToggle<CR>
map <silent> <C-n> :CocCommand explorer --sources=buffer-,file+<CR>
vmap <silent> <C-n> <esc>:CocCommand explorer --sources=buffer-,file+<CR>
map <Leader> <Plug>(easymotion-prefix)
nmap <Space> <Plug>(easymotion-s)
" map <Space> <Plug>(easymotion-s2)
" nmap <Space> <Plug>(easymotion-overwin-f2)
nmap <C-_> <plug>NERDCommenterToggle
vmap <C-_> <plug>NERDCommenterToggle
map <silent> <C-p> :Files<CR>
vmap <silent> <C-p> <esc>:Files<CR>
map <Leader>m :Marks<CR>
vmap <Leader>m <esc>:Marks<CR>
" nnoremap <silent> ? :noh<CR>
" vnoremap <silent> ? <esc>:noh<CR>
nnoremap <silent> ? :let @/ = ""<CR>
vnoremap <silent> ? <esc>:let @/ = ""<CR>
nnoremap <silent> <esc> :noh<cr>
nnoremap <silent> gf <C-W>gf
nnoremap <silent> <leader>p :Rg<CR>
nnoremap <silent> <leader>l :BLines<CR>
nnoremap <silent> <leader>ale :ALEToggle<CR>
nnoremap <silent> <leader>d :ALEDetail<CR>
nnoremap <silent> <leader>r :edit!<CR>
nnoremap <silent> , :Buffers<CR>
" noremap <silent> <M-w> :BD<cr>
nnoremap <Leader>re :%s/\<<C-r><C-w>\>/<C-r><C-w>
vnoremap <Leader>re :s/\<<C-r><C-w>\>/<C-r><C-w>
nnoremap <Leader>a :%y+<CR>
" nnoremap <Leader>dif :diffthis<CR>
nnoremap <silent> <Leader>q :call ConfirmQuit(0)<CR>
vnoremap <silent> <Leader>q <Esc>:call ConfirmQuit(0)<CR>
inoremap <silent> <Leader>q <Esc>:call ConfirmQuit(0)<CR>
map <BS> X
nmap <C-c> ^v$h"+y<CR>
vmap <C-c> "+y<CR>

" vnoremap p "_dp
" vnoremap p "_dP"
vnoremap p "0P
noremap <Leader>v "+p

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" inoremap <silent> <c-k> <Esc> :TmuxNavigateUp<cr>
" inoremap <silent> <c-j> <Esc> :TmuxNavigateDown<cr>
" inoremap <silent> <c-h> <Esc> :TmuxNavigateLeft<cr>
" inoremap <silent> <c-l> <Esc> :TmuxNavigateRight<cr>

" inoremap <c-j> <down>
" inoremap <c-h> <left>
inoremap <c-k> <up>
inoremap <c-l> <right>

nnoremap <silent> <C-w>< :exe "vertical resize " . (winwidth(0) * 3/2)<CR>
nnoremap <silent> <C-w>> :exe "vertical resize " . (winwidth(0) * 2/3)<CR>

" swap words
nnoremap <silent> gw "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o><c-l>:nohlsearch<CR>"
nnoremap <silent> gl "_yiw?\w\+\_W\+\%#<CR>:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o><c-l>:nohlsearch<CR>"

" Save file
noremap <silent> <C-S> :update<CR>
vnoremap <silent> <C-S> <C-C>:update<CR>
inoremap <silent> <C-S> <C-O>:update<CR>

" Tabs
noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
noremap <leader>4 4gt
noremap <leader>5 5gt
noremap <leader>6 6gt
noremap <leader>7 7gt
noremap <leader>8 8gt
noremap <leader>9 9gt
noremap <silent> <leader>0 :tablast<cr>
noremap <silent> <leader>) :tabmove<cr>
noremap <silent> <leader>! :tabmove 0<cr>
" noremap <silent> <leader>h :tabp<cr>
" noremap <silent> <leader>l :tabn<cr>
" inoremap <silent> <leader>h <Esc> :tabp<cr>
" inoremap <silent> <leader>l <Esc> :tabn<cr>
noremap <silent> <leader>w :q<cr>
nnoremap <silent> <leader>- :execute 'silent! tabmove ' . (tabpagenr()-2)<CR>
nnoremap <silent> <leader>= :execute 'silent! tabmove ' . (tabpagenr()+1)<CR>
nnoremap <silent> <Tab> :tabn<CR>
nnoremap <silent> <S-Tab> :tabp<CR>
vnoremap <silent> <Tab> <ESC>:tabn<CR>
vnoremap <silent> <S-Tab> <ESC>:tabp<CR>
nnoremap <silent> <leader><Tab> :Windows<CR>
if !exists('g:lasttab')
  let g:lasttab = 1
endif
nnoremap <silent> <Leader>'' :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()

" Fugitive
nnoremap <silent> <leader>gs :Git<CR>
nnoremap <silent> <leader>gc :Git commit -v -q<CR>
nnoremap <silent> <leader>ga :Git commit --amend<CR>
nnoremap <silent> <leader>gt :Git commit -v -q %<CR>
nnoremap <silent> <leader>gd :Git difftool<CR>
nnoremap <silent> <leader>ge :Gedit<CR>
nnoremap <silent> <leader>gr :Gread<CR>
nnoremap <silent> <leader>gw :Gwrite<CR><CR>
nnoremap <silent> <leader>gl :Git log<CR>
nnoremap <silent> <leader>gll :Git log .<CR>
nnoremap <silent> <leader>gp :Ggrep<Space>
nnoremap <silent> <leader>gm :GMove<Space>
nnoremap <silent> <leader>gb :Git branch<Space>
nnoremap <silent> <leader>go :Git checkout<Space>
nnoremap <silent> <leader>gps :Git push<CR>
nnoremap <silent> <leader>gpl :Git pull<CR>
nnoremap <silent> <leader>gbl :Git blame<CR>
nnoremap <silent> <leader>gsl :GStashList<CR>

nmap ]c <Plug>(GitGutterNextHunk)zz
nmap [c <Plug>(GitGutterPrevHunk)zz

" Agit
nnoremap <silent> <leader>ag :Agit<CR>
nnoremap <silent> <leader>agf :AgitFile<CR>

map <silent> <C-w>j :split<CR>
map <silent> <C-w>k :split<CR>
map <silent> <C-w>h :vsplit<CR>
map <silent> <C-w>l :vsplit<CR>

" nnoremap <silent> <leader>nf :NERDTreeTabsFind<CR>
nnoremap <silent> <Leader>rg :Rg <C-R><C-W><CR>
nnoremap <leader>/ /\<\><left><left>
nnoremap <silent> <leader>t :tabnew<CR>

" F-keys
nnoremap <silent> <F1> :call CocAction('toggleExtension', 'coc-clangd')<CR>
vnoremap <silent> <F1> <Esc>:call CocAction('toggleExtension', 'coc-clangd')<CR>
inoremap <silent> <F1> <Esc>:call CocAction('toggleExtension', 'coc-clangd')<CR>

nnoremap <silent> <F2> :CtrlSFToggle<CR>
vnoremap <silent> <F2> <Esc>:CtrlSFToggle<CR>
inoremap <silent> <F2> <Esc>:CtrlSFToggle<CR>

nnoremap <silent> <F3> :AsyncRun ctags -R --exclude={external,linux,toolchain,bootloader,prebuilt} --exclude="compilation_branch__*"<CR>
vnoremap <silent> <F3> <Esc>:AsyncRun ctags -R --exclude={external,linux,toolchain,bootloader,prebuilt} --exclude="compilation_branch__*"<CR>
inoremap <silent> <F3> <Esc>:AsyncRun ctags -R --exclude={external,linux,toolchain,bootloader,prebuilt} --exclude="compilation_branch__*"<CR>

nnoremap <F4> :setlocal spell! spelllang=ru_ru,en_us<CR>
inoremap <F4> <Esc>:setlocal spell! spelllang=ru_ru,en_us<CR>
vnoremap <F4> <Esc>:setlocal spell! spelllang=ru_ru,en_us<CR>

nnoremap <F5> :checktime<CR>
inoremap <F5> <Esc>:checktime<CR>
vnoremap <F5> <Esc>:checktime<CR>

nnoremap <silent> <F6> :silent !tmux send-keys -t build 'build -r' Enter<CR>
inoremap <silent> <F6> <Esc>:silent !tmux send-keys -t build 'build -r' Enter<CR>
vnoremap <silent> <F6> <Esc>:silent !tmux send-keys -t build 'build -r' Enter<CR>

nnoremap <silent> <F7> :tabdo windo set number!<CR>
inoremap <silent> <F7> <Esc>:tabdo windo set number!<CR>
vnoremap <silent> <F7> <Esc>:tabdo windo set number!<CR>

nnoremap <silent> <F8> :Vista!!<CR>
inoremap <silent> <F8> <Esc>:Vista!!<CR>
vnoremap <silent> <F8> <Esc>:Vista!!<CR>

" Coc
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gds :sp<CR><Plug>(coc-definition)
nmap <silent> gdv :vsp<CR><Plug>(coc-definition)
nmap <silent> gdt :vsp<CR><Plug>(coc-definition)<C-W>T
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1):
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Mappings for CoCList
" Show all diagnostics
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
" nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands
" nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item
" nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item
" nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
" nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>


" ALIASES
command! UP PlugUpdate
command! MDStart InstantMarkdownPreview
command! MDStop InstantMarkdownStop
command! DelWhitespace %s/\s\+$//e
command! -nargs=1 -complete=file E tabnew <args>


" FUNCS
function! s:GotoOrOpen(command, ...)
  for file in a:000
    if a:command == 'e'
      exec 'e ' . file
    else
      exec "tab drop " . file
    endif
  endfor
endfunction
command! -nargs=+ GotoOrOpen call s:GotoOrOpen(<f-args>)

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

function! ConfirmQuit(writeFile)
    if (a:writeFile)
        if (expand('%:t')=="")
            echo "Can't save a file with no name."
            return
        endif
        :write
    endif

    if (confirm("Do you really want to quit?", "&Yes\n&No", 2)==1)
        :quitall
    endif
endfu


" GEN SPELL FILES
for d in glob('~/.vim/spell/*.add', 1, 1)
    if filereadable(d) && (!filereadable(d . '.spl') || getftime(d) > getftime(d . '.spl'))
        silent exec 'mkspell! ' . fnameescape(d)
    endif
endfor

